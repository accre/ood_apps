#!/usr/bin/env bash

# Benchmark info
echo "TIMING - Starting main script at: $(date)"

# Set working directory to home directory
cd "${HOME}"

#
# Start Jupyter Notebook Server
#

# Purge the module environment to avoid conflicts
module purge
# Unset the python path
unset PYTHONPATH

# Load the pre-selected or custom modules
unset accre_jupyter_mc
<%- if context.use_mc.to_i == 1 -%>
accre_jupyter_mc=<%= context.mc %>
<%- end -%>

accre_cvmod=<%= context.version %>

if [ -n "${accre_jupyter_mc}" ]
then 
    module restore ${accre_jupyter_mc}
elif [[ "$accre_cvmod" == "Python/3.10.2" ]]
    source /cvmfs/soft.computecanada.ca/custom/python/envs/jupyterhub_node/v4.3.12/bin/activate
elif [[ "$accre_cvmod" == "Python/3.11.5" ]]
    source /cvmfs/soft.computecanada.ca/custom/python/envs/jupyterhub_node/v4.3.13/bin/activate
else
    source /cvmfs/soft.computecanada.ca/custom/python/envs/jupyterhub_node/v4.3.13/bin/activate
fi

# List loaded modules
module list

# Benchmark info
echo "TIMING - Starting jupyter at: $(date)"

# Launch the Jupyter Notebook Server
set -x

<%- if context.use_venv.to_i == 1 -%>
# Check if this is conda or standard python
#if python --version 2>&1 | grep -q Anaconda || which python 2>&1 | grep -q /accre/arch/easybuild/software/BinDist/Anaconda ; then
#  source activate <%= context.venv %>
#else
  source <%= context.venv %>/bin/activate
  # give the venv priority over Lmod python packages
  export PYTHONPATH=$(python -c 'import sys; print(sys.path[-1])'):${PYTHONPATH}
#fi
<%- end -%>

unset XDG_RUNTIME_DIR
jupyter notebook --config="${CONFIG_FILE}" --ip="0.0.0.0" --notebook-dir=<%= context.notebook_dir %>
